sumpophealth <- sumpophealth[order(-sumpophealth$totfat),]
xtable(sumpophealth, caption = "Total and average/incident Fatalities and Injuries - Sorted by total Fatalities")
#g <- ggplot(pophealth, aes(EVENT, FATALITIES))
#g + geom_boxplot()
#activity2 <- group_by(activity2, date)
#StepsPerDay <- summarise(activity2, total = sum(steps, na.rm = TRUE))
pophealth <- group_by(pophealth, EVENT)
pophealth$FATALITIES <- as.numeric(pophealth$FATALITIES)
pophealth$INJURIES <- as.numeric(pophealth$INJURIES)
sumpophealth <- summarise(pophealth, totfat = sum(FATALITIES), avefat = mean(FATALITIES), totinj = sum(INJURIES), aveinj = mean(INJURIES))
sumpophealth <- sumpophealth[order(-sumpophealth$totfat),]
xt <- xtable(sumpophealth, caption = "Total and average/incident Fatalities and Injuries - Sorted by total Fatalities")
print(xt, type = "html")
#g <- ggplot(pophealth, aes(EVENT, FATALITIES))
#g + geom_boxplot()
#activity2 <- group_by(activity2, date)
#StepsPerDay <- summarise(activity2, total = sum(steps, na.rm = TRUE))
event <- data.table(merge(event1, event2, by = "V1"))
View(event)
knitr::opts_chunk$set(echo = TRUE)
# ipak function: install and load multiple R packages.
# check to see if packages are installed. Install them if they are not, then load them into the R session.
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("data.table", "ggplot2", "dplyr", "xtable")
ipak(packages)
# download and read Storm Data file
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if(!file.exists("StormData.bz2"))download.file(fileUrl, "StormData.bz2")
if(!exists("StormData"))StormData <- read.csv("StormData.bz2")
# download and read Storm Data file
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if(!file.exists("StormData.bz2"))download.file(fileUrl, "StormData.bz2")
if(!exists("StormData"))StormData <- read.csv("StormData.bz2")
# Subset data to include only EventData, Fatality, and Injury data to look at population health question.
pophealth <- as.data.table(StormData[, c("EVTYPE", "FATALITIES", "INJURIES")])
pophealth <- pophealth[FATALITIES>0|INJURIES>0]
# Subset data to include only EventData, Reference number, Proper Damage and Crop Damage data to look at economics question. And EventData, Fatalities and Injury data to look at population health question.
prpdmg <- as.data.table(StormData[, c("EVTYPE", "PROPDMG", "PROPDMGEXP", "REFNUM")])
prpdmg <- prpdmg[PROPDMG>0]
crpdmg <- as.data.table(StormData[, c("EVTYPE", "CROPDMG", "CROPDMGEXP", "REFNUM")])
crpdmg <- crpdmg[CROPDMG>0]
# convert damage costs to dollars using multiplyers B = billions = 1E9, M = Millions = 1E6 and K = Thousands = 1E3. Then add property damage cost and crop damage cost.
x <-levels(prpdmg$PROPDMGEXP)
y <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1e9, 1e2, 1e2, 1e3, 1e6, 1e6)
df1 <- data.table(DMGEXP=x, MULT = y)
prpdmg <- merge(prpdmg, df1, by.x = "PROPDMGEXP", by.y = "DMGEXP")
crpdmg <- merge(crpdmg, df1, by.x = "CROPDMGEXP", by.y = "DMGEXP")
prpdmg <- prpdmg[, ':='(prpcst = PROPDMG * MULT)]
crpdmg <- crpdmg[, ':='(crpcst = CROPDMG * MULT)]
economics <- merge(prpdmg, crpdmg, by = c("REFNUM", "EVTYPE"), all.x = TRUE, all.y = TRUE)
economics[is.na(crpcst), crpcst:=0]
economics[is.na(prpcst), prpcst:=0]
economics <- mutate(economics, cost = 0)
economics$cost <- economics$prpcst + economics$crpcst
# Get and combine unique event types in the subsetted data
event1 <- data.table(unique(pophealth$EVTYPE, names("EVTYPE")))
event2 <- data.table(unique(economics$EVTYPE, names("EVTYPE")))
event <- data.table(merge(event1, event2, by = "V1"))
event <- mutate_each(event, funs(toupper))
event <- data.table(unique(event$V1))
names(event) <- "EVTYPE"
event <- mutate(event, EVENT = EVTYPE)
# Identify EVENTs which correspond to multiple EVTYPEs
for(i in 1:nrow(event)){
if(grepl(".*TORNADO.*|.*FUNNEL.*", event$EVTYPE[i])){
event$EVENT[i] <- "TORNADO"
}
else if(grepl(".*HURRICANE.*", event$EVTYPE[i])){
event$EVENT[i] <- "HURRICANE"
}
else if(grepl(".*AVALAN.*", event$EVTYPE[i])){
event$EVENT[i] <- "AVALANCHE"
}
else if(grepl(".*SNOW.*", event$EVTYPE[i])){
event$EVENT[i] <- "HEAVY SNOW"
}
else if(grepl(".*COASTAL.*FLOOD.*|.*TIDAL.*FLOOD.*", event$EVTYPE[i])){
event$EVENT[i] <- "COASTAL FLOOD"
}
else if(grepl(".*FLASH.*FLOOD.*", event$EVTYPE[i])){
event$EVENT[i] <- "FLASH FLOOD"
}
else if(grepl(".*FLOOD.*|.*RISING.*|.*WATER.*|.*FLD.*", event$EVTYPE[i])){
event$EVENT[i] <- "FLOOD"
}
else if(grepl(".*COLD.*|.*CHILL.*|.*LOW TEMP.*|.*HYPOTHERM.*", event$EVTYPE[i])){
event$EVENT[i] <- "COLD/WIND CHILL"
}
else if(grepl(".*HEAT.*|.*HYPERTHERM.*|.*WARM.*", event$EVTYPE[i])){
event$EVENT[i] <- "HEAT"
}
else if(grepl(".*COASTAL.*STORM.*", event$EVTYPE[i])){
event$EVENT[i] <- "COASTAL STORM"
}
else if(grepl(".*LIGHTNING.*", event$EVTYPE[i])){
event$EVENT[i] <- "LIGHTNING"
}
else if(grepl(".*MARINE.*THUND.*", event$EVTYPE[i])){
event$EVENT[i] <- "MARINE THUNDERSTORM WIND"
}
else if(grepl(".*THUND.*", event$EVTYPE[i])){
event$EVENT[i] <- "THUNDERSTORM WIND"
}
else if(grepl(".*DRY.*", event$EVTYPE[i])){
event$EVENT[i] <- "DUST STORM"
}
else if(grepl(".*SLIDE.*", event$EVTYPE[i])){
event$EVENT[i] <- "LANDSLIDE"
}
else if(grepl(".*RIP.*", event$EVTYPE[i])){
event$EVENT[i] <- "RIP CURRENT"
}
else if(grepl(".*FREEZE.*|.*FROST.*", event$EVTYPE[i])){
event$EVENT[i] <- "ICE/FREEZE"
}
else if(grepl(".*FREEZING.*|.*GLAZE.*|.*ICE STORM.*", event$EVTYPE[i])){
event$EVENT[i] <- "ICE STORM"
}
else if(grepl(".*RAIN.*", event$EVTYPE[i])){
event$EVENT[i] <- "HEAVY RAIN"
}
else if(grepl(".*SEA.*|.*SURF.*|.*SWELLS.*|.*WAVE.*|.*TIDE.*|.*SURGE.*", event$EVTYPE[i])){
event$EVENT[i] <- "HIGH SURF"
}
else if(grepl(".*ROAD.*|.*ICE.*", event$EVTYPE[i])){
event$EVENT[i] <- "ICY ROAD"
}
else if(grepl(".*MARINE.*", event$EVTYPE[i])){
event$EVENT[i] <- "MARINE HIGH WIND"
}
else if(grepl(".*TROPICAL.*|.*TSTM.*", event$EVTYPE[i])){
event$EVENT[i] <- "TROPICAL STORM"
}
else if(grepl(".*WIND.*", event$EVTYPE[i])){
event$EVENT[i] <- "HIGH WIND"
}
else if(grepl(".*FIRE.*", event$EVTYPE[i])){
event$EVENT[i] <- "WILDFIRE"
}
else if(grepl(".*WINTER.*|.*WINTRY.*", event$EVTYPE[i])){
event$EVENT[i] <- "WINTER STORM"
}
else if(grepl(".*HAIL.*", event$EVTYPE[i])){
event$EVENT[i] <- "HAIL"
}
else if(grepl(".*FOG.*", event$EVTYPE[i])){
event$EVENT[i] <- "DENSE FOG"
}
}
#Create column in subsetted data to group EVTYPE by EVENT
pophealth <- mutate_each(pophealth, funs(toupper))
pophealth <- merge(pophealth, event, by = "EVTYPE", allow.cartesian = TRUE)
economics <- mutate_each(economics, funs(toupper))
economics <- merge(economics, event, by = c("EVTYPE", "EVENT"), allow.cartesian = TRUE)
pophealth <- group_by(pophealth, EVENT)
pophealth$FATALITIES <- as.numeric(pophealth$FATALITIES)
pophealth$INJURIES <- as.numeric(pophealth$INJURIES)
sumpophealth <- summarise(pophealth, totfat = sum(FATALITIES), avefat = mean(FATALITIES), totinj = sum(INJURIES), aveinj = mean(INJURIES))
sumpophealth <- sumpophealth[order(-sumpophealth$totfat),]
xt <- xtable(sumpophealth, caption = "Total and average/incident Fatalities and Injuries - Sorted by total Fatalities")
print(xt, type = "html")
#g <- ggplot(pophealth, aes(EVENT, FATALITIES))
#g + geom_boxplot()
#activity2 <- group_by(activity2, date)
#StepsPerDay <- summarise(activity2, total = sum(steps, na.rm = TRUE))
?xtable
knitr::opts_chunk$set(echo = TRUE)
# ipak function: install and load multiple R packages.
# check to see if packages are installed. Install them if they are not, then load them into the R session.
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("plyr", "data.table", "ggplot2", "dplyr", "xtable")
ipak(packages)
# download and read Storm Data file
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if(!file.exists("StormData.bz2"))download.file(fileUrl, "StormData.bz2")
if(!exists("StormData"))StormData <- read.csv("StormData.bz2")
# Subset data to include only EventData, Fatality, and Injury data to look at population health question.
pophealth <- as.data.table(StormData[, c("EVTYPE", "FATALITIES", "INJURIES")])
pophealth <- pophealth[FATALITIES>0|INJURIES>0]
# Subset data to include only EventData, Reference number, Proper Damage and Crop Damage data to look at economics question. And EventData, Fatalities and Injury data to look at population health question.
prpdmg <- as.data.table(StormData[, c("EVTYPE", "PROPDMG", "PROPDMGEXP", "REFNUM")])
prpdmg <- prpdmg[PROPDMG>0]
crpdmg <- as.data.table(StormData[, c("EVTYPE", "CROPDMG", "CROPDMGEXP", "REFNUM")])
crpdmg <- crpdmg[CROPDMG>0]
# convert damage costs to dollars using multiplyers B = billions = 1E9, M = Millions = 1E6 and K = Thousands = 1E3. Then add property damage cost and crop damage cost.
x <-levels(prpdmg$PROPDMGEXP)
y <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1e9, 1e2, 1e2, 1e3, 1e6, 1e6)
df1 <- data.table(DMGEXP=x, MULT = y)
prpdmg <- merge(prpdmg, df1, by.x = "PROPDMGEXP", by.y = "DMGEXP")
crpdmg <- merge(crpdmg, df1, by.x = "CROPDMGEXP", by.y = "DMGEXP")
prpdmg <- prpdmg[, ':='(prpcst = PROPDMG * MULT)]
crpdmg <- crpdmg[, ':='(crpcst = CROPDMG * MULT)]
economics <- merge(prpdmg, crpdmg, by = c("REFNUM", "EVTYPE"), all.x = TRUE, all.y = TRUE)
economics[is.na(crpcst), crpcst:=0]
economics[is.na(prpcst), prpcst:=0]
economics <- mutate(economics, cost = 0)
economics$cost <- economics$prpcst + economics$crpcst
# Get and combine unique event types in the subsetted data
event1 <- data.table(unique(pophealth$EVTYPE, names("EVTYPE")))
event2 <- data.table(unique(economics$EVTYPE, names("EVTYPE")))
event <- data.table(merge(event1, event2, by = "V1"))
event <- mutate_each(event, funs(toupper))
event <- data.table(unique(event$V1))
names(event) <- "EVTYPE"
event <- mutate(event, EVENT = EVTYPE)
# Identify EVENTs which correspond to multiple EVTYPEs
for(i in 1:nrow(event)){
if(grepl(".*TORNADO.*|.*FUNNEL.*", event$EVTYPE[i])){
event$EVENT[i] <- "TORNADO"
}
else if(grepl(".*HURRICANE.*", event$EVTYPE[i])){
event$EVENT[i] <- "HURRICANE"
}
else if(grepl(".*AVALAN.*", event$EVTYPE[i])){
event$EVENT[i] <- "AVALANCHE"
}
else if(grepl(".*SNOW.*", event$EVTYPE[i])){
event$EVENT[i] <- "HEAVY SNOW"
}
else if(grepl(".*COASTAL.*FLOOD.*|.*TIDAL.*FLOOD.*", event$EVTYPE[i])){
event$EVENT[i] <- "COASTAL FLOOD"
}
else if(grepl(".*FLASH.*FLOOD.*", event$EVTYPE[i])){
event$EVENT[i] <- "FLASH FLOOD"
}
else if(grepl(".*FLOOD.*|.*RISING.*|.*WATER.*|.*FLD.*", event$EVTYPE[i])){
event$EVENT[i] <- "FLOOD"
}
else if(grepl(".*COLD.*|.*CHILL.*|.*LOW TEMP.*|.*HYPOTHERM.*", event$EVTYPE[i])){
event$EVENT[i] <- "COLD/WIND CHILL"
}
else if(grepl(".*HEAT.*|.*HYPERTHERM.*|.*WARM.*", event$EVTYPE[i])){
event$EVENT[i] <- "HEAT"
}
else if(grepl(".*COASTAL.*STORM.*", event$EVTYPE[i])){
event$EVENT[i] <- "COASTAL STORM"
}
else if(grepl(".*LIGHTNING.*", event$EVTYPE[i])){
event$EVENT[i] <- "LIGHTNING"
}
else if(grepl(".*MARINE.*THUND.*", event$EVTYPE[i])){
event$EVENT[i] <- "MARINE THUNDERSTORM WIND"
}
else if(grepl(".*THUND.*", event$EVTYPE[i])){
event$EVENT[i] <- "THUNDERSTORM WIND"
}
else if(grepl(".*DRY.*", event$EVTYPE[i])){
event$EVENT[i] <- "DUST STORM"
}
else if(grepl(".*SLIDE.*", event$EVTYPE[i])){
event$EVENT[i] <- "LANDSLIDE"
}
else if(grepl(".*RIP.*", event$EVTYPE[i])){
event$EVENT[i] <- "RIP CURRENT"
}
else if(grepl(".*FREEZE.*|.*FROST.*", event$EVTYPE[i])){
event$EVENT[i] <- "ICE/FREEZE"
}
else if(grepl(".*FREEZING.*|.*GLAZE.*|.*ICE STORM.*", event$EVTYPE[i])){
event$EVENT[i] <- "ICE STORM"
}
else if(grepl(".*RAIN.*", event$EVTYPE[i])){
event$EVENT[i] <- "HEAVY RAIN"
}
else if(grepl(".*SEA.*|.*SURF.*|.*SWELLS.*|.*WAVE.*|.*TIDE.*|.*SURGE.*", event$EVTYPE[i])){
event$EVENT[i] <- "HIGH SURF"
}
else if(grepl(".*ROAD.*|.*ICE.*", event$EVTYPE[i])){
event$EVENT[i] <- "ICY ROAD"
}
else if(grepl(".*MARINE.*", event$EVTYPE[i])){
event$EVENT[i] <- "MARINE HIGH WIND"
}
else if(grepl(".*TROPICAL.*|.*TSTM.*", event$EVTYPE[i])){
event$EVENT[i] <- "TROPICAL STORM"
}
else if(grepl(".*WIND.*", event$EVTYPE[i])){
event$EVENT[i] <- "HIGH WIND"
}
else if(grepl(".*FIRE.*", event$EVTYPE[i])){
event$EVENT[i] <- "WILDFIRE"
}
else if(grepl(".*WINTER.*|.*WINTRY.*", event$EVTYPE[i])){
event$EVENT[i] <- "WINTER STORM"
}
else if(grepl(".*HAIL.*", event$EVTYPE[i])){
event$EVENT[i] <- "HAIL"
}
else if(grepl(".*FOG.*", event$EVTYPE[i])){
event$EVENT[i] <- "DENSE FOG"
}
}
#Create column in subsetted data to group EVTYPE by EVENT
pophealth <- mutate_each(pophealth, funs(toupper))
pophealth <- merge(pophealth, event, by = "EVTYPE", allow.cartesian = TRUE)
economics <- mutate_each(economics, funs(toupper))
economics <- merge(economics, event, by = c("EVTYPE"), allow.cartesian = TRUE)
pophealth <- group_by(pophealth, EVENT)
pophealth$FATALITIES <- as.numeric(pophealth$FATALITIES)
pophealth$INJURIES <- as.numeric(pophealth$INJURIES)
sumpophealth <- summarise(pophealth, Total_Fatalities = sum(FATALITIES), Average_Fatalities = mean(FATALITIES), Total_Injuries = sum(INJURIES), Average_Injuries = mean(INJURIES))
sumpophealth <- sumpophealth[order(-sumpophealth$totfat),]
xt <- xtable(sumpophealth, caption = "Total and average/incident Fatalities and Injuries - Sorted by total Fatalities")
print(xt, type = "html")
pophealth <- group_by(pophealth, EVENT)
pophealth$FATALITIES <- as.numeric(pophealth$FATALITIES)
pophealth$INJURIES <- as.numeric(pophealth$INJURIES)
sumpophealth <- summarise(pophealth, Total_Fatalities = sum(FATALITIES), Average_Fatalities = mean(FATALITIES), Total_Injuries = sum(INJURIES), Average_Injuries = mean(INJURIES))
sumpophealth <- sumpophealth[order(-sumpophealth$Total_Fatalities),]
xt <- xtable(sumpophealth, caption = "Total and average/incident Fatalities and Injuries - Sorted by total Fatalities")
print(xt, type = "html")
?mfrow
?par
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(FATALITIES, EVENT))
g + geom_boxplot() + facet_grid(pophealth$EVENT)
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(FATALITIES, EVENT))
g + geom_boxplot() + facet_grid(pophealth$EVENT)
# Get and combine unique event types in the subsetted data
event1 <- data.table(unique(pophealth$EVTYPE, names("EVTYPE")))
event2 <- data.table(unique(economics$EVTYPE, names("EVTYPE")))
event <- data.table(merge(event1, event2, by = "V1"))
event <- mutate_each(event, funs(toupper))
event <- data.table(unique(event$V1))
names(event) <- "EVTYPE"
event <- mutate(event, EVENT = EVTYPE)
# Identify EVENTs which correspond to multiple EVTYPEs
for(i in 1:nrow(event)){
if(grepl(".*TORNADO.*|.*FUNNEL.*", event$EVTYPE[i])){
event$EVENT[i] <- "TORNADO"
}
else if(grepl(".*HURRICANE.*", event$EVTYPE[i])){
event$EVENT[i] <- "HURRICANE"
}
else if(grepl(".*AVALAN.*", event$EVTYPE[i])){
event$EVENT[i] <- "AVALANCHE"
}
else if(grepl(".*SNOW.*", event$EVTYPE[i])){
event$EVENT[i] <- "HEAVY_SNOW"
}
else if(grepl(".*COASTAL.*FLOOD.*|.*TIDAL.*FLOOD.*", event$EVTYPE[i])){
event$EVENT[i] <- "COASTAL_FLOOD"
}
else if(grepl(".*FLASH.*FLOOD.*", event$EVTYPE[i])){
event$EVENT[i] <- "FLASH_FLOOD"
}
else if(grepl(".*FLOOD.*|.*RISING.*|.*WATER.*|.*FLD.*", event$EVTYPE[i])){
event$EVENT[i] <- "FLOOD"
}
else if(grepl(".*COLD.*|.*CHILL.*|.*LOW TEMP.*|.*HYPOTHERM.*", event$EVTYPE[i])){
event$EVENT[i] <- "COLD/WIND_CHILL"
}
else if(grepl(".*HEAT.*|.*HYPERTHERM.*|.*WARM.*", event$EVTYPE[i])){
event$EVENT[i] <- "HEAT"
}
else if(grepl(".*COASTAL.*STORM.*", event$EVTYPE[i])){
event$EVENT[i] <- "COASTAL_STORM"
}
else if(grepl(".*LIGHTNING.*", event$EVTYPE[i])){
event$EVENT[i] <- "LIGHTNING"
}
else if(grepl(".*MARINE.*THUND.*", event$EVTYPE[i])){
event$EVENT[i] <- "MARINE_THUNDERSTORM_WIND"
}
else if(grepl(".*THUND.*", event$EVTYPE[i])){
event$EVENT[i] <- "THUNDERSTORM WIND"
}
else if(grepl(".*DRY.*", event$EVTYPE[i])){
event$EVENT[i] <- "DUST_STORM"
}
else if(grepl(".*SLIDE.*", event$EVTYPE[i])){
event$EVENT[i] <- "LANDSLIDE"
}
else if(grepl(".*RIP.*", event$EVTYPE[i])){
event$EVENT[i] <- "RIP_CURRENT"
}
else if(grepl(".*FREEZE.*|.*FROST.*", event$EVTYPE[i])){
event$EVENT[i] <- "ICE/FREEZE"
}
else if(grepl(".*FREEZING.*|.*GLAZE.*|.*ICE STORM.*", event$EVTYPE[i])){
event$EVENT[i] <- "ICE_STORM"
}
else if(grepl(".*RAIN.*", event$EVTYPE[i])){
event$EVENT[i] <- "HEAVY_RAIN"
}
else if(grepl(".*SEA.*|.*SURF.*|.*SWELLS.*|.*WAVE.*|.*TIDE.*|.*SURGE.*", event$EVTYPE[i])){
event$EVENT[i] <- "HIGH_SURF"
}
else if(grepl(".*ROAD.*|.*ICE.*", event$EVTYPE[i])){
event$EVENT[i] <- "ICY_ROAD"
}
else if(grepl(".*MARINE.*", event$EVTYPE[i])){
event$EVENT[i] <- "MARINE_HIGH_WIND"
}
else if(grepl(".*TROPICAL.*|.*TSTM.*", event$EVTYPE[i])){
event$EVENT[i] <- "TROPICAL_STORM"
}
else if(grepl(".*WIND.*", event$EVTYPE[i])){
event$EVENT[i] <- "HIGH_WIND"
}
else if(grepl(".*FIRE.*", event$EVTYPE[i])){
event$EVENT[i] <- "WILDFIRE"
}
else if(grepl(".*WINTER.*|.*WINTRY.*", event$EVTYPE[i])){
event$EVENT[i] <- "WINTER_STORM"
}
else if(grepl(".*HAIL.*", event$EVTYPE[i])){
event$EVENT[i] <- "HAIL"
}
else if(grepl(".*FOG.*", event$EVTYPE[i])){
event$EVENT[i] <- "DENSE_FOG"
}
}
#Create column in subsetted data to group EVTYPE by EVENT
pophealth <- mutate_each(pophealth, funs(toupper))
pophealth <- merge(pophealth, event, by = "EVTYPE", allow.cartesian = TRUE)
economics <- mutate_each(economics, funs(toupper))
economics <- merge(economics, event, by = c("EVTYPE"), allow.cartesian = TRUE)
pophealth <- group_by(pophealth, EVENT)
pophealth$FATALITIES <- as.numeric(pophealth$FATALITIES)
pophealth$INJURIES <- as.numeric(pophealth$INJURIES)
sumpophealth <- summarise(pophealth, Total_Fatalities = sum(FATALITIES), Average_Fatalities = mean(FATALITIES), Total_Injuries = sum(INJURIES), Average_Injuries = mean(INJURIES))
sumpophealth <- sumpophealth[order(-sumpophealth$Total_Fatalities),]
xt <- xtable(sumpophealth, caption = "Total and average/incident Fatalities and Injuries - Sorted by total Fatalities")
print(xt, type = "html")
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(FATALITIES, EVENT))
g + geom_boxplot() + facet_grid(pophealth$EVENT)
?facet_grid
pophealth <- group_by(pophealth, EVENT)
pophealth$FATALITIES <- as.numeric(pophealth$FATALITIES)
pophealth$INJURIES <- as.numeric(pophealth$INJURIES)
sumpophealth <- summarise(pophealth, Total_Fatalities = sum(FATALITIES), Average_Fatalities = mean(FATALITIES), Total_Injuries = sum(INJURIES), Average_Injuries = mean(INJURIES))
sumpophealth <- sumpophealth[order(-sumpophealth$Total_Fatalities),]
xt <- xtable(sumpophealth, caption = "Total and average/incident Fatalities and Injuries - Sorted by total Fatalities")
print(xt, type = "html")
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(FATALITIES, EVENT))
g + geom_boxplot() + facet_grid(.~pophealth$EVENT)
pophealth <- group_by(pophealth, EVENT)
pophealth$FATALITIES <- as.numeric(pophealth$FATALITIES)
pophealth$INJURIES <- as.numeric(pophealth$INJURIES)
sumpophealth <- summarise(pophealth, Total_Fatalities = sum(FATALITIES), Average_Fatalities = mean(FATALITIES), Total_Injuries = sum(INJURIES), Average_Injuries = mean(INJURIES))
sumpophealth <- sumpophealth[order(-sumpophealth$Total_Fatalities),]
xt <- xtable(sumpophealth, caption = "Total and average/incident Fatalities and Injuries - Sorted by total Fatalities")
print(xt, type = "html")
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(FATALITIES))
g + geom_boxplot() + facet_grid(.~pophealth$EVENT)
pophealth <- group_by(pophealth, EVENT)
pophealth$FATALITIES <- as.numeric(pophealth$FATALITIES)
pophealth$INJURIES <- as.numeric(pophealth$INJURIES)
sumpophealth <- summarise(pophealth, Total_Fatalities = sum(FATALITIES), Average_Fatalities = mean(FATALITIES), Total_Injuries = sum(INJURIES), Average_Injuries = mean(INJURIES))
sumpophealth <- sumpophealth[order(-sumpophealth$Total_Fatalities),]
xt <- xtable(sumpophealth, caption = "Total and average/incident Fatalities and Injuries - Sorted by total Fatalities")
print(xt, type = "html")
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(FATALITIES))
g + geom_boxplot() + facet_grid(pophealth$EVENT~.)
?geom_boxplot
g + geom_boxplot()
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(FATALITIES, EVENT))
g + geom_boxplot()
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(FATALITIES, EVENT.y))
g + geom_boxplot() + facet_grid(EVENT.y~.)
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(EVENT.y, FATALITIES))
g + geom_boxplot() + facet_grid(.~EVENT.y)
?facet_wrap
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(EVENT.y, FATALITIES))
g + geom_boxplot() + facet_wrap(.~EVENT.y, nrow = 6, ncol = 6)
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(EVENT.y, FATALITIES))
g + geom_boxplot() + facet_wrap(~EVENT.y, nrow = 6, ncol = 6)
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(EVENT.y, log10(FATALITIES))
g + geom_boxplot() + facet_wrap(~EVENT.y, nrow = 6, ncol = 6)
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(EVENT.y, log10(FATALITIES)))
g + geom_boxplot() + facet_wrap(~EVENT.y, nrow = 6, ncol = 6)
View(pophealth)
pophealth <- mutate(pophealth, FATX = 1, INJX = 2)
par(mfrow = c(6,5))
g <- ggplot(pophealth, aes(FATX, log10(FATALITIES)))
g + geom_boxplot() + facet_wrap(~EVENT.y, nrow = 6, ncol = 6)
g <- ggplot(pophealth, aes(FATX, log10(FATALITIES)))+ geom_boxplot()
g + geom_boxplot(INJX, log10(INJURIES)) + facet_wrap(~EVENT.y, nrow = 6, ncol = 6)
g <- ggplot(pophealth, aes(FATX, log10(FATALITIES)))+ geom_boxplot()
g + geom_boxplot(INJX, log10(pophealth$INJURIES)) + facet_wrap(~EVENT.y, nrow = 6, ncol = 6)
h <- ggplot(pophealth, aes(INJX, log10(INJURIES)))+ geom_boxplot()
g + h + facet_wrap(~EVENT.y, nrow = 6, ncol = 6)
sumpophealth <- summarise(pophealth, Total_Fatalities = sum(FATALITIES), Average_Fatalities = mean(FATALITIES), Total_Injuries = sum(INJURIES), Average_Injuries = mean(INJURIES))
pophealth <- group_by(pophealth, EVENT)
pophealth$FATALITIES <- as.numeric(pophealth$FATALITIES)
pophealth$INJURIES <- as.numeric(pophealth$INJURIES)
sumpophealth <- summarise(pophealth, Total_Fatalities = sum(FATALITIES), Average_Fatalities = mean(FATALITIES), Total_Injuries = sum(INJURIES), Average_Injuries = mean(INJURIES))
sumpophealth <- sumpophealth[order(-sumpophealth$Total_Fatalities),]
pophealth <- group_by(pophealth, EVENT)
